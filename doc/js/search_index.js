var search_data = {"index":{"searchIndex":["object","silkey","clientfactory","configuration","contract","frozenarray","contractfactory","loggerservice","models","jwtpayload","registrycontract","sdk","utils","abi_path()","add0x()","bin_path()","current_timestamp()","empty?()","empty_hex?()","ethereum_address?()","fetch_silkey_public_key()","generate_sso_request_params()","hex?()","import()","int_to_hex()","lib_path()","message_to_sign()","message_to_sign_by_silkey()","message_to_sign_by_user()","private_key?()","remove0x()","root_path()","scope()","scope_divider()","set_address()","set_email()","set_ref_id()","set_scope()","set_silkey_signature()","set_user_signature()","setup()","sign_message()","sign_plain_message()","signature?()","str_to_bytes32()","strings_to_hex()","token_payload_verifier()","validate()","verify_message()","verify_plain_message()","changelog","development","license","readme"],"longSearchIndex":["object","silkey","silkey::clientfactory","silkey::configuration","silkey::contract","silkey::contract::frozenarray","silkey::contractfactory","silkey::loggerservice","silkey::models","silkey::models::jwtpayload","silkey::registrycontract","silkey::sdk","silkey::utils","silkey::abi_path()","silkey::utils::add0x()","silkey::bin_path()","silkey::utils::current_timestamp()","silkey::utils::empty?()","silkey::utils::empty_hex?()","silkey::utils::ethereum_address?()","silkey::sdk::fetch_silkey_public_key()","silkey::sdk::generate_sso_request_params()","silkey::utils::hex?()","silkey::models::jwtpayload#import()","silkey::utils::int_to_hex()","silkey::lib_path()","silkey::sdk::message_to_sign()","silkey::models::jwtpayload#message_to_sign_by_silkey()","silkey::models::jwtpayload#message_to_sign_by_user()","silkey::utils::private_key?()","silkey::utils::remove0x()","silkey::root_path()","silkey::models::jwtpayload#scope()","silkey::models::jwtpayload#scope_divider()","silkey::models::jwtpayload#set_address()","silkey::models::jwtpayload#set_email()","silkey::models::jwtpayload#set_ref_id()","silkey::models::jwtpayload#set_scope()","silkey::models::jwtpayload#set_silkey_signature()","silkey::models::jwtpayload#set_user_signature()","silkey::configuration::setup()","silkey::utils::sign_message()","silkey::utils::sign_plain_message()","silkey::utils::signature?()","silkey::utils::str_to_bytes32()","silkey::utils::strings_to_hex()","silkey::sdk::token_payload_verifier()","silkey::models::jwtpayload#validate()","silkey::utils::verify_message()","silkey::utils::verify_plain_message()","","","",""],"info":[["Object","","Object.html","",""],["Silkey","","Silkey.html","",""],["Silkey::ClientFactory","","Silkey/ClientFactory.html","",""],["Silkey::Configuration","","Silkey/Configuration.html","",""],["Silkey::Contract","","Silkey/Contract.html","",""],["Silkey::Contract::FrozenArray","","Silkey/Contract/FrozenArray.html","",""],["Silkey::ContractFactory","","Silkey/ContractFactory.html","",""],["Silkey::LoggerService","","Silkey/LoggerService.html","",""],["Silkey::Models","","Silkey/Models.html","",""],["Silkey::Models::JwtPayload","","Silkey/Models/JwtPayload.html","",""],["Silkey::RegistryContract","","Silkey/RegistryContract.html","",""],["Silkey::SDK","","Silkey/SDK.html","",""],["Silkey::Utils","","Silkey/Utils.html","",""],["abi_path","Silkey","Silkey.html#method-c-abi_path","()",""],["add0x","Silkey::Utils","Silkey/Utils.html#method-c-add0x","(string)",""],["bin_path","Silkey","Silkey.html#method-c-bin_path","()",""],["current_timestamp","Silkey::Utils","Silkey/Utils.html#method-c-current_timestamp","()",""],["empty?","Silkey::Utils","Silkey/Utils.html#method-c-empty-3F","(string)",""],["empty_hex?","Silkey::Utils","Silkey/Utils.html#method-c-empty_hex-3F","(string)",""],["ethereum_address?","Silkey::Utils","Silkey/Utils.html#method-c-ethereum_address-3F","(string)",""],["fetch_silkey_public_key","Silkey::SDK","Silkey/SDK.html#method-c-fetch_silkey_public_key","()","<p>Fetches public ethereum Silkey address (directly from blockchain). This address can be used for token …\n"],["generate_sso_request_params","Silkey::SDK","Silkey/SDK.html#method-c-generate_sso_request_params","(private_key, hash)","<p>Generates all needed parameters (including signature) for requesting Silkey SSO\n<p>@param [string] private …\n"],["hex?","Silkey::Utils","Silkey/Utils.html#method-c-hex-3F","(string)",""],["import","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-import","(hash)",""],["int_to_hex","Silkey::Utils","Silkey/Utils.html#method-c-int_to_hex","(int)",""],["lib_path","Silkey","Silkey.html#method-c-lib_path","()",""],["message_to_sign","Silkey::SDK","Silkey/SDK.html#method-c-message_to_sign","(hash = {})","<p>Generates message to sign based on plain object data (keys =&gt; values)\n<p>@param [Hash]\n<p>@return [string] …\n"],["message_to_sign_by_silkey","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-message_to_sign_by_silkey","()",""],["message_to_sign_by_user","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-message_to_sign_by_user","()","<p>Creates message that&#39;s need to be sign by user\n"],["private_key?","Silkey::Utils","Silkey/Utils.html#method-c-private_key-3F","(string)",""],["remove0x","Silkey::Utils","Silkey/Utils.html#method-c-remove0x","(string)",""],["root_path","Silkey","Silkey.html#method-c-root_path","()",""],["scope","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-scope","()","<p>rubocop:enable Style/HashSyntax\n"],["scope_divider","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-scope_divider","()",""],["set_address","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-set_address","(addr)",""],["set_email","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-set_email","(email)",""],["set_ref_id","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-set_ref_id","(ref_id)",""],["set_scope","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-set_scope","(scope)","<p>rubocop:disable Naming/AccessorMethodName\n"],["set_silkey_signature","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-set_silkey_signature","(sig, timestamp)",""],["set_user_signature","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-set_user_signature","(sig, timestamp)",""],["setup","Silkey::Configuration","Silkey/Configuration.html#method-c-setup","()",""],["sign_message","Silkey::Utils","Silkey/Utils.html#method-c-sign_message","(private_key, message)",""],["sign_plain_message","Silkey::Utils","Silkey/Utils.html#method-c-sign_plain_message","(private_key, message)",""],["signature?","Silkey::Utils","Silkey/Utils.html#method-c-signature-3F","(string)",""],["str_to_bytes32","Silkey::Utils","Silkey/Utils.html#method-c-str_to_bytes32","(string)",""],["strings_to_hex","Silkey::Utils","Silkey/Utils.html#method-c-strings_to_hex","(arr)",""],["token_payload_verifier","Silkey::SDK","Silkey/SDK.html#method-c-token_payload_verifier","(token, silkey_public_key = nil)","<p>Verifies JWT token payload\n<p>@see jwt.io/ for details about token payload data\n<p>@param [string] JWT token …\n"],["validate","Silkey::Models::JwtPayload","Silkey/Models/JwtPayload.html#method-i-validate","()",""],["verify_message","Silkey::Utils","Silkey/Utils.html#method-c-verify_message","(message, signature)",""],["verify_plain_message","Silkey::Utils","Silkey/Utils.html#method-c-verify_plain_message","(message, signature)",""],["CHANGELOG","","CHANGELOG_md.html","","<p>Changelog\n<p>All notable changes to this project will be documented in this file.\n<p>The format is based on  …\n"],["DEVELOPMENT","","DEVELOPMENT_md.html","","<p>Silkey-SDK for Ruby\n<p>[logo]\n<p>[slogan]\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2020 Silkey\n<p>Permission is hereby granted, free of charge, to any person …\n"],["README","","README_md.html","","<p>Silkey-SDK for Ruby\n<p>[logo]\n<p>[slogan]\n"]]}}